// Generated by LiveScript 1.6.0
(function(){
  var requireLs, sendMedia, deleteMessage, ref$, objToPairs, join, keys, trace, express, bodyParser, cors, vm, livescript, handlebars, request, superagent, mergeImages, editMessage, makeBot, makeDbManager, create, greenlockStoreFs, unhash, ishash, getTelegramPassportText, passportScriptProxy, passportIndexProxy, passportSuccessProxy, passportCanceledProxy, proxyPassportFile, readFile, readFileSync, writeFileSync, validateAttachment, processValidator, processValidators, processTextValidators, toString$ = {}.toString, slice$ = [].slice;
  requireLs = require('require-ls');
  sendMedia = require('./send-media.ls');
  deleteMessage = require('./delete-message.ls');
  ref$ = require('prelude-ls'), objToPairs = ref$.objToPairs, join = ref$.join, keys = ref$.keys;
  trace = require('./trace.ls');
  express = require('express');
  bodyParser = require('body-parser');
  cors = require('cors');
  vm = require('vm');
  livescript = require('livescript');
  handlebars = require('handlebars');
  request = require('request');
  superagent = require('superagent');
  mergeImages = require('./merge-images.ls');
  editMessage = require('./edit-message.ls');
  makeBot = require('./make-bot.ls');
  makeDbManager = require('./make-db-manager.ls');
  create = require('greenlock-express').create;
  greenlockStoreFs = require('greenlock-store-fs');
  ref$ = require('./create-buttons.ls'), unhash = ref$.unhash, ishash = ref$.ishash;
  ref$ = require('./telegram-passport.ls'), getTelegramPassportText = ref$.getTelegramPassportText, passportScriptProxy = ref$.passportScriptProxy, passportIndexProxy = ref$.passportIndexProxy, passportSuccessProxy = ref$.passportSuccessProxy, passportCanceledProxy = ref$.passportCanceledProxy, proxyPassportFile = ref$.proxyPassportFile;
  ref$ = require('fs'), readFile = ref$.readFile, readFileSync = ref$.readFileSync, writeFileSync = ref$.writeFileSync;
  validateAttachment = function(text, validateError, cb){
    var res;
    res = (text != null ? text : "").indexOf('get-file') > -1;
    if (res !== true) {
      return cb(validateError != null ? validateError : "Expected Attachment");
    }
    return cb(null);
  };
  processValidator = function(validator, validateError, text, cb){
    if (toString$.call(text).slice(8, -1) !== 'String') {
      return cb("text is required");
    }
    if (validator === 'attachment') {
      return validateAttachment(text, validateError, cb);
    }
    if (text.match(new RegExp(validator)) == null) {
      return cb(validateError != null
        ? validateError
        : "Expected " + validator);
    }
    return cb(null);
  };
  processValidators = function(arg$, validateError, text, cb){
    var vaidator, rest;
    vaidator = arg$[0], rest = slice$.call(arg$, 1);
    if (typeof validator == 'undefined' || validator === null) {
      return cb(null);
    }
    return processValidator(validator, validateError, text, function(err){
      if (err != null) {
        return cb(err);
      }
      return processValidators(rest, validateError, text, cb);
    });
  };
  processTextValidators = function(step, arg$, cb){
    var text, type, ref$, ref1$, validate, validateError;
    text = arg$.text, type = arg$.type;
    if (type === 'callback_query') {
      return cb(null);
    }
    if (((ref$ = step.onText) != null ? ref$.validate : void 8) == null) {
      return cb(null);
    }
    ref1$ = step.onText, validate = ref1$.validate, validateError = ref1$.validateError;
    if (toString$.call(validate).slice(8, -1) === 'Array') {
      return processValidators(validate, validateError, text, cb);
    }
    if (toString$.call(validate).slice(8, -1) === 'String') {
      return processValidator(validate, validateError, text, cb);
    }
    return cb(null);
  };
  module.exports = function(arg$, cb){
    var telegramToken, app, layout, dbType, serverAddress, serverPort, serverSslPort, botName, serverAddr, tanos, bot;
    telegramToken = arg$.telegramToken, app = arg$.app, layout = arg$.layout, dbType = arg$.dbType, serverAddress = arg$.serverAddress, serverPort = arg$.serverPort, serverSslPort = arg$.serverSslPort, botName = arg$.botName;
    serverAddr = (function(){
      switch (false) {
      case serverSslPort == null:
        return serverAddress.replace(/^http/, 'https') + ":" + serverSslPort;
      default:
        return serverAddress + ":" + serverPort;
      }
    }());
    tanos = {};
    bot = makeBot(telegramToken);
    tanos.bot = bot;
    return makeDbManager(layout, dbType, function(err, db){
      var get, put, del, $app, defaultUser, getUser, saveUser, saveGlobal, getGlobal, sendEachUser, getLocalizedText, handlerTextUser, runCommands, saveStoreItems, saveStore, getChatId, getUserByMessage, runJavascript, runFunction, runLivescript, runCommand, getRequestResource, getRequestLocation, getRequestContact, getRequestPassport, buildCommandHash, generateCommands, onStart, getImages, getLocalizedButtons, getButtonsGeneric, getMenu, getButtons, getPreviousStepKey, gotoAll, deleteMessageIfExists, processCondition, processConditions, checkShowNext, checkRegirectConditions, executeOnEnter, goto, getPreviousStep, preventAction, getText, noButtons, extractLocalizedButtons, extractByButton, extractButton, onCommand, handlers, handlerKeys, storeUsername, processHandlers, processMesssage, updatePreviousMesssage, getFromId, processHttpMessage, restify, proxyFile, startWithSsl, startWithoutSsl, start;
      if (err != null) {
        return cb(err);
      }
      get = db.get, put = db.put, del = db.del;
      tanos.db = db;
      $app = app(tanos);
      defaultUser = function(chat_id){
        return {
          chat_id: chat_id
        };
      };
      getUser = function(chat_id, cb){
        return get(chat_id + ":chat_id", function(err, item){
          if (err != null) {
            return cb(null, defaultUser(chat_id));
          }
          if (item != null) {
            return cb(null, item);
          }
          return cb(null, defaultUser(chat_id));
        });
      };
      tanos.getUser = getUser;
      saveUser = function(chat_id, user, cb){
        return put(chat_id + ":chat_id", user, cb);
      };
      tanos.saveUser = saveUser;
      saveGlobal = function($global, cb){
        return put('variables:global', $global, function(err){
          if (err != null) {
            return cb(err);
          }
          return cb(null);
        });
      };
      tanos.saveGlobal = saveGlobal;
      getGlobal = function(cb){
        return get('variables:global', function(err, data){
          var obj;
          obj = (function(){
            switch (false) {
            case err == null:
              return {};
            default:
              return data != null
                ? data
                : {};
            }
          }());
          return cb(null, obj);
        });
      };
      tanos.getGlobal = getGlobal;
      sendEachUser = function(arg$, current_step, cb){
        var chat_id, rest, message;
        chat_id = arg$[0], rest = slice$.call(arg$, 1);
        if (chat_id == null) {
          return cb(null);
        }
        message = {
          from: {
            id: chat_id
          },
          text: ""
        };
        return goto(current_step, message, function(err){
          if (err != null) {
            return cb(err);
          }
          return sendEachUser(rest, current_step, cb);
        });
      };
      tanos.sendUser = function(chat_id, current_step, cb){
        var chat_ids;
        chat_ids = (function(){
          switch (false) {
          case toString$.call(chat_id).slice(8, -1) !== 'Array':
            return chat_id;
          case toString$.call(chat_id).slice(8, -1) !== 'Number':
            return [chat_id];
          }
        }());
        return sendEachUser(chat_ids, current_step, cb);
      };
      getLocalizedText = function($user, text){
        var lang, ref$, head, tail;
        if (toString$.call(text).slice(8, -1) !== 'Object') {
          return "err: wrong text";
        }
        if (toString$.call(text.langVar).slice(8, -1) !== 'String') {
          return "err: lang-var is missing";
        }
        lang = eval(text.langVar);
        if (toString$.call(lang).slice(8, -1) !== 'String' || lang.length === 0) {
          return "err: lang is not correct";
        }
        ref$ = keys(text), head = ref$[0], tail = slice$.call(ref$, 1);
        return (ref$ = text[lang]) != null
          ? ref$
          : (ref$ = text[head]) != null ? ref$ : "text is not declared";
      };
      handlerTextUser = function(chat_id, inputText, cb){
        return getUser(chat_id, function(err, $user){
          if (err != null) {
            return cb(err);
          }
          return getGlobal(function(err, $global){
            var text, template, result;
            if (err != null) {
              return cb(err);
            }
            text = (function(){
              switch (false) {
              case toString$.call(inputText).slice(8, -1) !== 'Array':
                return join('\n')(
                inputText);
              case toString$.call(inputText).slice(8, -1) !== 'String':
                return inputText;
              case toString$.call(inputText).slice(8, -1) !== 'Object':
                return getLocalizedText($user, inputText);
              default:
                return "err: unsupported type of text";
              }
            }());
            template = handlebars.compile(text);
            result = template({
              $user: $user,
              $app: $app,
              $global: $global
            });
            return saveGlobal($global, function(err){
              if (err != null) {
                return cb(err);
              }
              return cb(null, result);
            });
          });
        });
      };
      runCommands = function(message, text, arg$, cb){
        var command, commands;
        command = arg$[0], commands = slice$.call(arg$, 1);
        if (command == null) {
          return cb(null);
        }
        return runCommand(message, text, command, function(err){
          if (err != null) {
            return cb(err);
          }
          return runCommands(message, text, commands, function(err){
            if (err != null) {
              return cb(err);
            }
            return cb(null);
          });
        });
      };
      saveStoreItems = function(arg$, cb){
        var item, items, name, value;
        item = arg$[0], items = slice$.call(arg$, 1);
        if (item == null) {
          return cb(null);
        }
        name = item[0], value = item[1];
        return put(name, value, function(err){
          if (err != null) {
            return cb(err);
          }
          return saveStoreItems(items, cb);
        });
      };
      saveStore = function($store, cb){
        var pairs;
        pairs = objToPairs($store);
        return saveStoreItems(pairs, cb);
      };
      getChatId = function(message){
        var chat_id, ref$;
        return chat_id = ((ref$ = message.chat) != null
          ? ref$
          : message.from).id;
      };
      getUserByMessage = function(message, cb){
        var chat_id;
        chat_id = getChatId(message);
        return getUser(chat_id, function(err, $user){
          if (err != null) {
            return cb(err);
          }
          return cb(null, $user);
        });
      };
      runJavascript = function(message, $text, javascript, cb){
        var chat_id;
        chat_id = getChatId(message);
        return getUserByMessage(message, function(err, $user){
          var $chat, $message_id, script, $store;
          if (err != null) {
            return cb(err);
          }
          $chat = message.chat;
          $message_id = message.message_id;
          script = new vm.Script(javascript);
          $store = {};
          return getGlobal(function(err, $global){
            var context;
            if (err != null) {
              return cb(err);
            }
            context = new vm.createContext({
              $user: $user,
              $app: $app,
              $store: $store,
              $text: $text,
              $chat: $chat,
              $global: $global
            });
            try {
              script.runInContext(context);
            } catch (e$) {
              err = e$;
              cb(err);
            }
            return saveGlobal($global, function(err){
              if (err != null) {
                return cb(err);
              }
              return saveUser(chat_id, $user, function(err){
                if (err != null) {
                  return cb(err);
                }
                return saveStore($store, function(err){
                  if (err) {
                    return cb(err);
                  }
                  return cb(null);
                });
              });
            });
          });
        });
      };
      runFunction = function(message, $text, command, cb){
        var chat_id;
        chat_id = getChatId(message);
        return getUserByMessage(message, function(err, $user){
          var $chat, $store;
          if (err != null) {
            return cb(err);
          }
          $chat = message.chat;
          $store = {};
          return getGlobal(function(err, $global){
            var javascript, func;
            if (err != null) {
              return cb(err);
            }
            javascript = livescript.compile(command, {
              bare: true
            });
            func = eval("t = " + javascript);
            return func({
              $user: $user,
              $app: $app,
              $store: $store,
              $text: $text,
              $chat: $chat,
              $global: $global
            }, function(err){
              if (err != null) {
                return cb(err);
              }
              return saveGlobal($global, function(err){
                if (err != null) {
                  return cb(err);
                }
                return saveUser(chat_id, $user, function(err){
                  if (err != null) {
                    return cb(err);
                  }
                  return saveStore($store, function(err){
                    if (err) {
                      return cb(err);
                    }
                    return cb(null);
                  });
                });
              });
            });
          });
        });
      };
      runLivescript = function(message, $text, command, cb){
        var javascript;
        if (command.indexOf(')->') > -1) {
          return runFunction(message, $text, command, cb);
        }
        javascript = livescript.compile(command, {
          bare: true
        });
        return runJavascript(message, $text, javascript, cb);
      };
      runCommand = function(message, $text, command, cb){
        trace("run command: " + command);
        return runLivescript(message, $text, command, cb);
      };
      getRequestResource = function(type, resource){
        return function(arg$, cb){
          var chat_id, menuMap, name, ref$;
          chat_id = arg$.chat_id, menuMap = arg$.menuMap, name = arg$.name;
          if (menuMap[type] == null) {
            return cb(null);
          }
          if (toString$.call(menuMap[type].langVar).slice(8, -1) !== 'String' && ((ref$ = menuMap[type][name]) != null ? ref$ : "").toString().indexOf(resource) === 0) {
            return cb(null, resource);
          }
          if (toString$.call(menuMap[type].langVar).slice(8, -1) !== 'String') {
            return cb(null);
          }
          return getUser(chat_id, function(err, $user){
            var lang, ref$, ref1$;
            if (err != null) {
              return cb(err);
            }
            lang = eval(menuMap[type].langVar);
            if (((ref$ = (ref1$ = menuMap[type][lang]) != null ? ref1$[name] : void 8) != null ? ref$ : "").toString().indexOf(resource) === 0) {
              return cb(null, resource);
            }
            return cb(null);
          });
        };
      };
      getRequestLocation = getRequestResource('menu', 'request_location');
      getRequestContact = getRequestResource('menu', 'request_contact');
      getRequestPassport = getRequestResource('buttons', 'request_passport');
      buildCommandHash = function(arg$, cb){
        var chat_id, current_step, previous_step, name, menuMap;
        chat_id = arg$.chat_id, current_step = arg$.current_step, previous_step = arg$.previous_step, name = arg$.name, menuMap = arg$.menuMap;
        return getRequestLocation({
          chat_id: chat_id,
          menuMap: menuMap,
          name: name
        }, function(err, data){
          if (err == null && data != null) {
            return cb(null, data);
          }
          return getRequestContact({
            chat_id: chat_id,
            menuMap: menuMap,
            name: name
          }, function(err, data){
            if (err == null && data != null) {
              return cb(null, data);
            }
            return getRequestPassport({
              chat_id: chat_id,
              menuMap: menuMap,
              name: name
            }, function(err, data){
              if (err == null && data != null) {
                return cb(null, data);
              }
              return cb(null, current_step + ":" + name);
            });
          });
        });
      };
      generateCommands = function(arg$, arg1$, cb){
        var chat_id, current_step, previous_step, menuMap, button, buttons, name;
        chat_id = arg$.chat_id, current_step = arg$.current_step, previous_step = arg$.previous_step, menuMap = arg$.menuMap;
        button = arg1$[0], buttons = slice$.call(arg1$, 1);
        if (button == null) {
          return cb(null, []);
        }
        name = button[0];
        return buildCommandHash({
          chat_id: chat_id,
          current_step: current_step,
          previous_step: previous_step,
          name: name,
          menuMap: menuMap
        }, function(err, result){
          if (err != null) {
            return cb(err);
          }
          return handlerTextUser(chat_id, name, function(err, text){
            var item;
            if (err != null) {
              return cb(err);
            }
            item = [text, result, button[1]];
            return generateCommands({
              chat_id: chat_id,
              current_step: current_step,
              previous_step: previous_step,
              menuMap: menuMap
            }, buttons, function(err, rest){
              var all;
              if (err != null) {
                return cb(err);
              }
              all = [item].concat(rest);
              return cb(null, all);
            });
          });
        });
      };
      onStart = function(message, cb){
        return onCommand({
          text: '/start',
          from: message.chat,
          type: "message"
        }, cb);
      };
      getImages = function(menuMap, cb){
        var result;
        result = (function(){
          switch (false) {
          case !(toString$.call(menuMap.images).slice(8, -1) === 'Array' && menuMap.images.length > 0):
            return menuMap.images;
          case toString$.call(menuMap.images).slice(8, -1) !== 'String':
            return [menuMap.images];
          default:
            return [];
          }
        }());
        if (result.length === 0) {
          return mergeImages(menuMap, cb);
        }
        return cb(null, result);
      };
      getLocalizedButtons = function(arg$, cb){
        var chat_id, buttons;
        chat_id = arg$.chat_id, buttons = arg$.buttons;
        if (toString$.call(buttons.langVar).slice(8, -1) !== 'String') {
          return cb(null, buttons);
        }
        return getUser(chat_id, function(err, $user){
          var lang, result, ref$;
          lang = eval(buttons.langVar);
          result = (ref$ = buttons[lang]) != null
            ? ref$
            : {};
          return cb(null, result);
        });
      };
      getButtonsGeneric = function(name){
        return function(arg$, cb){
          var chat_id, current_step, menuMap, previous_step, buttons, ref$;
          chat_id = arg$.chat_id, current_step = arg$.current_step, menuMap = arg$.menuMap, previous_step = arg$.previous_step;
          buttons = (ref$ = menuMap[name]) != null
            ? ref$
            : {};
          return getLocalizedButtons({
            chat_id: chat_id,
            buttons: buttons
          }, function(err, buttons){
            var pairs;
            if (err != null) {
              return cb(err);
            }
            pairs = objToPairs(
            buttons);
            return generateCommands({
              chat_id: chat_id,
              current_step: current_step,
              previous_step: previous_step,
              menuMap: menuMap
            }, pairs, function(err, commands){
              if (err != null) {
                return cb(err);
              }
              return cb(null, commands);
            });
          });
        };
      };
      getMenu = getButtonsGeneric('menu');
      getButtons = getButtonsGeneric('buttons');
      getPreviousStepKey = function(message){
        return message.from.id + ":previous-step";
      };
      gotoAll = function(arg$, message, cb){
        var current_step, steps;
        current_step = arg$[0], steps = slice$.call(arg$, 1);
        if (current_step == null) {
          return cb(null, true);
        }
        return goto(current_step, message, function(err, success){
          if (err != null) {
            return cb(err, success);
          }
          return gotoAll(steps, message, cb);
        });
      };
      deleteMessageIfExists = function(arg$, cb){
        var chat_id, message_id;
        chat_id = arg$.chat_id, message_id = arg$.message_id;
        if (message_id == null) {
          return cb(null);
        }
        return deleteMessage({
          bot: bot,
          chat_id: chat_id,
          message_id: message_id
        }, cb);
      };
      processCondition = function(command, message, cb){
        var javascript;
        javascript = livescript.compile(command, {
          bare: true
        });
        return getUserByMessage(message, function(err, $user){
          if (err != null) {
            return cb(err);
          }
          return getGlobal(function(err, $global){
            var script, $check, context;
            if (err != null) {
              return cb(err);
            }
            script = new vm.Script(javascript);
            $check = {
              result: false
            };
            context = new vm.createContext({
              $user: $user,
              $app: $app,
              $check: $check,
              $global: $global
            });
            try {
              script.runInContext(context);
            } catch (e$) {
              err = e$;
              return cb(err);
            }
            return cb(null, $check.result);
          });
        });
      };
      processConditions = function(arg$, message, cb){
        var condition, conditions;
        condition = arg$[0], conditions = slice$.call(arg$, 1);
        if (condition == null) {
          return cb(null);
        }
        return processCondition(condition[0], message, function(err, data){
          if (err != null) {
            return cb(err);
          }
          if (data === true) {
            return cb(null, condition[1]);
          }
          return processConditions(conditions, message, cb);
        });
      };
      checkShowNext = function(currentStep, message, cb){
        if (toString$.call(currentStep != null ? currentStep.goto : void 8).slice(8, -1) !== 'String') {
          return cb(null);
        }
        return cb(null, currentStep != null ? currentStep.goto : void 8);
      };
      checkRegirectConditions = function(currentStep, message, cb){
        var redirectConditions;
        if ((currentStep != null ? currentStep.redirectCondition : void 8) == null) {
          return cb(null);
        }
        if (toString$.call(currentStep != null ? currentStep.redirectCondition : void 8).slice(8, -1) !== 'Object') {
          return cb("redirect condition should be an object");
        }
        redirectConditions = objToPairs(
        currentStep != null ? currentStep.redirectCondition : void 8);
        return processConditions(redirectConditions, message, cb);
      };
      executeOnEnter = function(menuMap, message, cb){
        var onEnter, text;
        onEnter = (function(){
          switch (false) {
          case toString$.call(menuMap.onEnter).slice(8, -1) !== 'Array':
            return menuMap.onEnter;
          case toString$.call(menuMap.onEnter).slice(8, -1) !== 'String':
            return [menuMap.onEnter];
          default:
            return [];
          }
        }());
        text = '#enter';
        return runCommands(message, text, onEnter, function(err){
          if (err != null) {
            return cb(err);
          }
          return cb(null);
        });
      };
      goto = function(current_step, message, cb){
        console.log('goto', current_step);
        if (err != null) {
          return cb(err, false);
        }
        return getPreviousStep(message, function(err, previous_step){
          var previousStepKey, nameMenu;
          if (err != null) {
            return cb(err, false);
          }
          previousStepKey = getPreviousStepKey(message);
          nameMenu = current_step + ":bot-step";
          return put(previousStepKey, current_step, function(err){
            if (err != null) {
              return cb(err, false);
            }
            return get(current_step + ":bot-step", function(err, currentMap){
              return checkRegirectConditions(currentMap, message, function(err, regirect_step){
                if (err != null) {
                  return cb(err, false);
                }
                if (regirect_step != null) {
                  return goto(regirect_step, message, cb);
                }
                if (err != null) {
                  return cb(err, false);
                }
                return get("main:bot-step", function(err, mainMap){
                  var menuMap;
                  if (err != null) {
                    return cb(err, false);
                  }
                  menuMap = currentMap != null ? currentMap : mainMap;
                  return executeOnEnter(menuMap, message, function(err){
                    var chat_id;
                    if (err != null) {
                      return cb(err, false);
                    }
                    chat_id = message.from.id;
                    return getMenu({
                      chat_id: chat_id,
                      current_step: current_step,
                      menuMap: menuMap,
                      previous_step: previous_step
                    }, function(err, menuGuess){
                      if (err != null) {
                        return cb(err, false);
                      }
                      return getButtons({
                        chat_id: chat_id,
                        current_step: current_step,
                        menuMap: menuMap,
                        previous_step: previous_step
                      }, function(err, buttons){
                        if (err != null) {
                          return cb(err, false);
                        }
                        return getImages(menuMap, function(err, images){
                          var photo, chat;
                          if (err != null) {
                            return cb(err, false);
                          }
                          photo = (function(){
                            switch (false) {
                            case toString$.call(images).slice(8, -1) !== 'Undefined':
                              return null;
                            case toString$.call(images).slice(8, -1) !== 'Array':
                              return images[0];
                            case toString$.call(images).slice(8, -1) !== 'String':
                              return images;
                            default:
                              return null;
                            }
                          }());
                          chat = message.from;
                          return handlerTextUser(chat_id, menuMap.text, function(err, text){
                            var menu, messageBody;
                            if (err != null) {
                              return cb(err, false);
                            }
                            menu = (function(){
                              switch (false) {
                              case !(keys(buttons).length > 0):
                                return null;
                              default:
                                return menuGuess;
                              }
                            }());
                            messageBody = {
                              bot: bot,
                              chat: chat,
                              photo: photo,
                              buttons: buttons,
                              text: text,
                              menu: menu,
                              serverAddr: serverAddr
                            };
                            return sendMedia(messageBody, function(err, nextMessage){
                              if (err != null) {
                                return cb(err, false);
                              }
                              return put(nextMessage.message_id + ":message", (import$({
                                current_step: current_step
                              }, messageBody)), function(err){
                                if (err != null) {
                                  return cb(err, false);
                                }
                                return get("${chat_id}." + current_step, function(err, message_id){
                                  return deleteMessageIfExists({
                                    chat_id: chat_id,
                                    message_id: message_id
                                  }, function(){
                                    return put("${chat_id}." + current_step, nextMessage.message_id, function(err){
                                      if (err != null) {
                                        return cb(err, false);
                                      }
                                      return checkShowNext(currentMap, message, function(err, show_next){
                                        if (show_next != null) {
                                          return goto(show_next, message, cb);
                                        }
                                        if (err != null) {
                                          return cb(err, false);
                                        }
                                        console.log('YES');
                                        return cb(null, true);
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      };
      getPreviousStep = function(message, cb){
        var previousStepKey;
        previousStepKey = getPreviousStepKey(message);
        return get(previousStepKey, function(err, previous_step_guess){
          var ref$;
          return get((message != null ? (ref$ = message.message) != null ? ref$.message_id : void 8 : void 8) + ":message", function(err, previousMessageBody){
            var text, ref$, previous_step;
            text = (ref$ = message.data) != null ? ref$ : "";
            previous_step = (function(){
              switch (false) {
              case !(text.indexOf(':') > -1 && text.indexOf('goto:') === -1):
                return text.split(':')[0];
              case previousMessageBody == null:
                return previousMessageBody.current_step;
              case previous_step_guess == null:
                return previous_step_guess;
              default:
                return 'main';
              }
            }());
            return cb(null, previous_step);
          });
        });
      };
      preventAction = function(arg$, cb){
        var bot, chat, text;
        bot = arg$.bot, chat = arg$.chat, text = arg$.text;
        return sendMedia({
          bot: bot,
          chat: chat,
          text: text,
          serverAddr: serverAddr
        }, function(err){
          if (err != null) {
            return cb(err, false);
          }
          return cb(null, true);
        });
      };
      getText = function(message, cb){
        var getLast, text;
        if (message.passport_data != null) {
          return getTelegramPassportText({
            serverAddr: serverAddr,
            db: db
          }, message, cb);
        }
        getLast = function(message){
          var length;
          length = message.photo.length;
          return message.photo[length - 1];
        };
        text = (function(){
          switch (false) {
          case message.data == null:
            return message.data;
          case message.text == null:
            return message.text;
          case message.contact == null:
            return message.contact.phone_number + " " + message.contact.first_name + " " + message.contact.last_name;
          case message.location == null:
            return "<a href='https://www.google.com/maps/@" + message.location.latitude + "," + message.location.longitude + ",15z'>Место на карте</a>";
          case message.document == null:
            return "<a href='" + serverAddr + "/get-file/" + message.document.file_id + "'>Документ</a>";
          case message.photo == null:
            return "<a href='" + serverAddr + "/get-file/" + getLast(message).file_id + "'>Фотография</a>";
          case message.video == null:
            return "<a href='" + serverAddr + "/get-file/" + message.video.file_id + "'>Видео</a>";
          case message.voice == null:
            return "<a href='" + serverAddr + "/get-file/" + message.voice.file_id + "'>Запись голоса</a>";
          default:
            return message.text;
          }
        }());
        return cb(null, text);
      };
      noButtons = function(step){
        return step.buttons == null && step.menu == null;
      };
      extractLocalizedButtons = function(arg$, cb){
        var message, buttons;
        message = arg$.message, buttons = arg$.buttons;
        if (message == null) {
          return cb("message is required");
        }
        if (toString$.call(buttons).slice(8, -1) !== 'Object') {
          return cb("buttons object is required");
        }
        if (toString$.call(buttons.langVar).slice(8, -1) !== 'String') {
          return cb(null, buttons);
        }
        return getUserByMessage(message, function(err, $user){
          var lang;
          if (err != null) {
            return cb(err);
          }
          lang = eval(buttons.langVar);
          return cb(null, buttons[lang]);
        });
      };
      extractByButton = function(arg$, buttons, cb){
        var message, text;
        message = arg$.message, text = arg$.text;
        if (buttons == null) {
          return cb("buttons not found");
        }
        return extractLocalizedButtons({
          message: message,
          buttons: buttons
        }, function(err, buttons){
          var name, res, ref$;
          if (err != null) {
            return cb(err);
          }
          if (buttons == null) {
            return cb("buttons not found");
          }
          name = (function(){
            switch (false) {
            case !((text != null ? text : "").indexOf(':') > -1):
              return text.split(':')[1];
            default:
              return text;
            }
          }());
          res = (ref$ = buttons[name]) != null
            ? ref$
            : buttons[text];
          return cb(null, res);
        });
      };
      extractButton = function(arg$, cb){
        var text, previousStep, mainStep, message, button;
        text = arg$.text, previousStep = arg$.previousStep, mainStep = arg$.mainStep, message = arg$.message;
        console.log('extract-button', text);
        if (previousStep == null) {
          return cb("previous-step is required");
        }
        button = (function(){
          switch (false) {
          case text != null:
            return 'goto:main';
          case !((text != null ? text : "").indexOf('goto:') > -1):
            return text;
          case !(previousStep.onText != null && message.type !== 'callback_query'):
            return previousStep.onText;
          case !noButtons(previousStep):
            return null;
          }
        }());
        if (button != null) {
          return cb(null, button);
        }
        return extractByButton({
          message: message,
          text: text
        }, previousStep.buttons, function(err, button){
          if (button != null) {
            return cb(null, button);
          }
          return extractByButton({
            message: message,
            text: text
          }, previousStep.menu, function(err, button){
            if (button != null) {
              return cb(null, button);
            }
            return extractByButton({
              message: message,
              text: text
            }, mainStep.buttons, function(err, button){
              if (button != null) {
                return cb(null, button);
              }
              return extractByButton({
                message: message,
                text: text
              }, mainStep.menu, function(err, button){
                if (button != null) {
                  return cb(null, button);
                }
                return cb(null, null);
              });
            });
          });
        });
      };
      onCommand = function(message, cb){
        var ref$;
        if ((message != null ? (ref$ = message.message) != null ? ref$.message_id : void 8 : void 8) == null) {
          return cb(null, false);
        }
        return getPreviousStep(message, function(err, previous_step){
          if (err != null) {
            return cb(err, false);
          }
          return getText(message, function(err, text){
            if (err != null) {
              return cb(err);
            }
            return get("main:bot-step", function(err, mainStep){
              if (err != null) {
                return cb(err);
              }
              return get(previous_step + ":bot-step", function(err, previousStepGuess){
                var previousStep;
                previousStep = previousStepGuess != null ? previousStepGuess : mainStep;
                return processTextValidators(previousStep, {
                  text: text,
                  type: message.type
                }, function(err){
                  if (err != null) {
                    return preventAction({
                      bot: bot,
                      chat: message.from,
                      text: err + ""
                    }, cb);
                  }
                  return extractButton({
                    text: text,
                    previousStep: previousStep,
                    mainStep: mainStep,
                    message: message
                  }, function(err, clickedButton){
                    var buttonNotFound, commands;
                    console.log(clickedButton);
                    buttonNotFound = message.text != null && message.data == null && clickedButton === null && previous_step !== 'main';
                    if (buttonNotFound) {
                      return cb(null, true);
                    }
                    clickedButton = clickedButton != null ? clickedButton : 'goto:main';
                    commands = (function(){
                      switch (false) {
                      case toString$.call(clickedButton.store).slice(8, -1) !== 'String':
                        return [clickedButton.store];
                      case toString$.call(clickedButton.store).slice(8, -1) !== 'Array':
                        return clickedButton.store;
                      default:
                        return [];
                      }
                    }());
                    return runCommands(message, text, commands, function(err){
                      var current_step, currentSteps;
                      if (err != null) {
                        return cb(err, false);
                      }
                      current_step = (function(){
                        switch (false) {
                        case toString$.call(clickedButton).slice(8, -1) !== 'String':
                          return clickedButton.split(':')[1];
                        case toString$.call(clickedButton).slice(8, -1) !== 'Object':
                          return clickedButton.goto;
                        default:
                          return null;
                        }
                      }());
                      if (current_step == null) {
                        return cb(null, true);
                      }
                      currentSteps = current_step.split(',');
                      return gotoAll(currentSteps, message, function(err, success){
                        return cb(err, success);
                      });
                    });
                  });
                });
              });
            });
          });
        });
      };
      handlers = {
        onCommand: onCommand,
        onStart: onStart
      };
      handlerKeys = Object.keys(handlers);
      storeUsername = function(message, cb){
        if (message.chat == null) {
          return cb(null);
        }
        return put(message.chat.username + ":username", message.chat.id, function(err){
          if (err != null) {
            return cb(err);
          }
          return put(message.chat.id + ":chat_id->username", message.chat.username, function(err){
            if (err != null) {
              return cb(err);
            }
            return cb(null);
          });
        });
      };
      processHandlers = function(arg$, message, cb){
        var handler, rest, chat_id;
        handler = arg$[0], rest = slice$.call(arg$, 1);
        if (handler == null) {
          return cb(null, false);
        }
        chat_id = message.from.id;
        return storeUsername(message, function(err){
          var message_id;
          if (err != null) {
            return cb(err);
          }
          message_id = message.message.message_id;
          return handlers[handler](message, function(err, result){
            if (err != null) {
              return cb(err, false);
            }
            if (result) {
              return cb(null, true);
            }
            return processHandlers(rest, message, function(err, result){
              return cb(err, result);
            });
          });
        });
      };
      processMesssage = function(query, cb){
        var message;
        message = query.message;
        if (message == null) {
          return cb(null);
        }
        return processHandlers(handlerKeys, query, function(result){
          return cb(null, result);
        });
      };
      updatePreviousMesssage = function(arg$, cb){
        var type, message, option;
        type = arg$.type, message = arg$.message;
        if (type === 'message') {
          return cb(null);
        }
        if ((message != null ? message.message : void 8) == null) {
          return cb(null);
        }
        option = (function(){
          var ref$;
          switch (false) {
          case !(((ref$ = message.data) != null ? ref$.indexOf(':') : void 8) > -1):
            return message.data.split(":")[1];
          default:
            return message.data;
          }
        }());
        return get(message.message.message_id + ":message", function(err, messageBody){
          var chat_id, message_id, text;
          if (err != null) {
            return cb(err);
          }
          chat_id = message.message.chat.id;
          message_id = message.message.message_id;
          text = messageBody.text + "\n\n`" + option + "`";
          return editMessage(bot, serverAddr, chat_id, message_id, text, {}, {}, function(err){
            return cb(null);
          });
        });
      };
      bot.on('update', function(result){
        var message, ref$, type;
        message = (ref$ = result.message) != null
          ? ref$
          : result.callback_query;
        if (message.data != null) {
          message.data = unhash(message.data);
        }
        type = (function(){
          switch (false) {
          case result.callback_query == null:
            return 'callback_query';
          case !(message.text != null && message.text.indexOf('​') > -1):
            return 'callback_query';
          default:
            return 'message';
          }
        }());
        if (message.text != null) {
          message.text = message.text.replace('​', '');
        }
        return updatePreviousMesssage({
          type: type,
          message: message
        }, function(){
          return processMesssage((import$({
            message: message,
            type: type
          }, message)), trace);
        });
      });
      getFromId = function(arg$, cb){
        var message, token;
        message = arg$.message, token = arg$.token;
        return get(token + ":access-keys", function(err, record){
          var chat_id, steps;
          if (err != null) {
            return cb(err);
          }
          if (toString$.call(record).slice(8, -1) !== 'Object') {
            return cb("not found registered record for token");
          }
          chat_id = record.chat_id, steps = record.steps;
          if (steps.indexOf(message) > -1) {
            return cb("step is not permitted");
          }
          return get(chat_id + ":chat_id", function(err, user){
            if (err != null) {
              return cb(err);
            }
            return del(token + ":access-keys", function(err){
              if (err != null) {
                return cb(err);
              }
              return cb(null, user);
            });
          });
        });
      };
      processHttpMessage = function(body, cb){
        var ref$, message, token;
        ref$ = req.body, message = ref$.message, token = ref$.token;
        if (message == null) {
          return cb("message is required");
        }
        if (token == null) {
          return cb("token is required");
        }
        return getFromId({
          message: message,
          token: token
        }, function(err, id){
          var from;
          if (err != null) {
            return cb(err);
          }
          from = {
            id: id
          };
          return processMesssage({
            message: message,
            from: from
          }, function(err, result){
            if (err != null) {
              return cb(err);
            }
            return cb(null, result);
          });
        });
      };
      restify = function(res){
        return function(err, result){
          var ref$;
          if (err != null) {
            return res.status(400).send(((ref$ = err.message) != null ? ref$ : err) + "");
          }
          return res.send(result);
        };
      };
      proxyFile = function(req, res){
        var file_id;
        file_id = req.params.file_id;
        return bot.getFile({
          file_id: file_id
        }, function(err, data){
          if (err != null) {
            return res.status(400).send("cannot get file: " + err);
          }
          return request.get("https://api.telegram.org/file/bot" + telegramToken + "/" + data.file_path).pipe(res);
        });
      };
      tanos.http = express();
      startWithSsl = function(cb){
        var greenlock;
        greenlock = create({
          email: 'a.stegno@gmail.com',
          agreeTos: true,
          configDir: './config/acme/',
          communityMember: false,
          telemetry: false,
          app: tanos.http,
          debug: false,
          store: greenlockStoreFs
        });
        greenlock.listen(serverPort, serverSslPort);
        return cb(err, tanos);
      };
      startWithoutSsl = function(cb){
        return tanos.http.listen(serverPort, function(err){
          return cb(err, tanos);
        });
      };
      tanos.http.use(bodyParser.urlencoded({
        extended: true
      })).use(bodyParser.json()).use(cors()).get('/telegram-passport/script.js', passportScriptProxy).get('/telegram-passport/index.html', passportIndexProxy({
        serverAddr: serverAddr,
        telegramToken: telegramToken,
        db: db,
        botName: botName
      })).get('/telegram-passport/tg_passport=success', passportSuccessProxy({
        botName: botName
      })).get('/telegram-passport/tg_passport=canceled', passportCanceledProxy({
        botName: botName
      })).get('/telegram-passport', passportSuccessProxy({
        botName: botName
      })).get('/get-file/:file_id', proxyFile).get('/get-decrypted-file/:file_id', proxyPassportFile({
        bot: bot,
        telegramToken: telegramToken,
        db: db
      })).post('/api/message/:message/:token', function(req, res){
        return processHttpMessage(req.params, restify(res));
      }).get('/api/message/:message/:token', function(req, res){
        return processHttpMessage(req.params, restify(res));
      });
      start = (function(){
        switch (false) {
        case serverSslPort == null:
          return startWithSsl;
        default:
          return startWithoutSsl;
        }
      }());
      return start(cb);
    });
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
