// Generated by LiveScript 1.6.0
(function(){
  var requireLs, sendMedia, deleteMessage, ref$, objToPairs, join, trace, express, bodyParser, cors, vm, livescript, handlebars, request, mergeImages, editMessage, makeBot, makeDbManager, slice$ = [].slice, toString$ = {}.toString;
  requireLs = require('require-ls');
  sendMedia = require('./send-media.ls');
  deleteMessage = require('./delete-message.ls');
  ref$ = require('prelude-ls'), objToPairs = ref$.objToPairs, join = ref$.join;
  trace = require('./trace.ls');
  express = require('express');
  bodyParser = require('body-parser');
  cors = require('cors');
  vm = require('vm');
  livescript = require('livescript');
  handlebars = require('handlebars');
  request = require('request');
  mergeImages = require('./merge-images.ls');
  editMessage = require('./edit-message.ls');
  makeBot = require('./make-bot.ls');
  makeDbManager = require('./make-db-manager.ls');
  module.exports = function(arg$, cb){
    var telegramToken, app, layout, dbType, serverAddress, serverPort, tanos, bot;
    telegramToken = arg$.telegramToken, app = arg$.app, layout = arg$.layout, dbType = arg$.dbType, serverAddress = arg$.serverAddress, serverPort = arg$.serverPort;
    tanos = {};
    bot = makeBot(telegramToken);
    return makeDbManager(layout, dbType, function(err, db){
      var get, put, del, $app, defaultUser, getUser, saveUser, saveGlobal, getGlobal, sendEachUser, handlerTextUser, runCommands, saveStoreItems, saveStore, getChatId, getUserByMessage, runJavascript, runFunction, runLivescript, runCommand, buildCommandHash, generateCommands, onStart, getImages, getButtonsGeneric, getButtons, getMenu, getPreviousStepKey, gotoAll, deleteMessageIfExists, processCondition, processConditions, checkRegirectConditions, unvarStep, executeOnEnter, goto, getPreviousStep, onCommand, handlers, handlerKeys, storeUsername, processHandlers, processMesssage, updatePreviousMesssage, getFromId, processHttpMessage, restify, proxyFile;
      if (err != null) {
        return cb(err);
      }
      get = db.get, put = db.put, del = db.del;
      $app = app({
        db: db,
        bot: bot,
        tanos: tanos
      });
      defaultUser = function(chat_id){
        return {
          chat_id: chat_id
        };
      };
      getUser = function(chat_id, cb){
        return get(chat_id + ":chat_id", function(err, item){
          if (err != null) {
            return cb(null, defaultUser(chat_id));
          }
          if (item != null) {
            return cb(null, item);
          }
          return cb(null, defaultUser(chat_id));
        });
      };
      tanos.getUser = getUser;
      saveUser = function(chat_id, user, cb){
        return put(chat_id + ":chat_id", user, cb);
      };
      saveGlobal = function($global, cb){
        return put('variables:global', $global, function(err){
          if (err != null) {
            return cb(err);
          }
          return cb(null);
        });
      };
      tanos.saveGlobal = saveGlobal;
      getGlobal = function(cb){
        return get('variables:global', function(err, data){
          var obj;
          obj = (function(){
            switch (false) {
            case err == null:
              return {};
            default:
              return data != null
                ? data
                : {};
            }
          }());
          return cb(null, obj);
        });
      };
      tanos.getGlobal = getGlobal;
      sendEachUser = function(arg$, current_step, cb){
        var chat_id, rest, message;
        chat_id = arg$[0], rest = slice$.call(arg$, 1);
        if (chat_id == null) {
          return cb(null);
        }
        message = {
          from: {
            id: chat_id
          },
          text: ""
        };
        return goto(current_step, message, function(err){
          if (err != null) {
            return cb(err);
          }
          return cb(null);
        });
      };
      tanos.sendUser = function(chat_id, current_step, cb){
        var chat_ids;
        chat_ids = (function(){
          switch (false) {
          case toString$.call(chat_id).slice(8, -1) !== 'Array':
            return chat_id;
          case toString$.call(chat_id).slice(8, -1) !== 'Number':
            return [chat_id];
          }
        }());
        return sendEachUser(chat_ids, current_step, cb);
      };
      handlerTextUser = function(chat_id, inputText, cb){
        return getUser(chat_id, function(err, $user){
          if (err != null) {
            return cb(err);
          }
          return getGlobal(function(err, $global){
            var text, template, result;
            if (err != null) {
              return cb(err);
            }
            text = (function(){
              switch (false) {
              case toString$.call(inputText).slice(8, -1) !== 'Array':
                return join('\n')(
                inputText);
              case toString$.call(inputText).slice(8, -1) !== 'String':
                return inputText;
              default:
                return "ERR: Unsupported type of text";
              }
            }());
            template = handlebars.compile(text);
            result = template({
              $user: $user,
              $app: $app,
              $global: $global
            });
            return saveGlobal($global, function(err){
              if (err != null) {
                return cb(err);
              }
              return cb(null, result);
            });
          });
        });
      };
      runCommands = function(message, text, arg$, cb){
        var command, commands;
        command = arg$[0], commands = slice$.call(arg$, 1);
        if (command == null) {
          return cb(null);
        }
        return runCommand(message, text, command, function(err){
          if (err != null) {
            return cb(err);
          }
          return runCommands(message, text, commands, function(err){
            if (err != null) {
              return cb(err);
            }
            return cb(null);
          });
        });
      };
      saveStoreItems = function(arg$, cb){
        var item, items, name, value;
        item = arg$[0], items = slice$.call(arg$, 1);
        if (item == null) {
          return cb(null);
        }
        name = item[0], value = item[1];
        return put(name, value, function(err){
          if (err != null) {
            return cb(err);
          }
          return saveStoreItems(items, cb);
        });
      };
      saveStore = function($store, cb){
        var pairs;
        pairs = objToPairs($store);
        return saveStoreItems(pairs, cb);
      };
      getChatId = function(message){
        var chat_id, ref$;
        return chat_id = ((ref$ = message.chat) != null
          ? ref$
          : message.from).id;
      };
      getUserByMessage = function(message, cb){
        var chat_id;
        chat_id = getChatId(message);
        return getUser(chat_id, function(err, $user){
          if (err != null) {
            return cb(err);
          }
          return cb(null, $user);
        });
      };
      runJavascript = function(message, $text, javascript, cb){
        var chat_id;
        chat_id = getChatId(message);
        return getUserByMessage(message, function(err, $user){
          var $chat, $message_id, script, $store;
          if (err != null) {
            return cb(err);
          }
          $chat = message.chat;
          $message_id = message.message_id;
          script = new vm.Script(javascript);
          $store = {};
          return getGlobal(function(err, $global){
            var context;
            if (err != null) {
              return cb(err);
            }
            context = new vm.createContext({
              $user: $user,
              $app: $app,
              $store: $store,
              $text: $text,
              $chat: $chat,
              $global: $global
            });
            script.runInContext(context);
            return saveGlobal($global, function(err){
              if (err != null) {
                return cb(err);
              }
              return saveUser(chat_id, $user, function(err){
                if (err != null) {
                  return cb(err);
                }
                return saveStore($store, function(err){
                  if (err) {
                    return cb(err);
                  }
                  return cb(null);
                });
              });
            });
          });
        });
      };
      runFunction = function(message, $text, command, cb){
        var chat_id;
        chat_id = getChatId(message);
        return getUserByMessage(message, function(err, $user){
          var $chat, $store;
          if (err != null) {
            return cb(err);
          }
          $chat = message.chat;
          $store = {};
          return getGlobal(function(err, $global){
            var javascript, func;
            if (err != null) {
              return cb(err);
            }
            javascript = livescript.compile(command, {
              bare: true
            });
            func = eval("t = " + javascript);
            return func({
              $user: $user,
              $app: $app,
              $store: $store,
              $text: $text,
              $chat: $chat,
              $global: $global
            }, function(err){
              if (err != null) {
                return cb(err);
              }
              return saveGlobal($global, function(err){
                if (err != null) {
                  return cb(err);
                }
                return saveUser(chat_id, $user, function(err){
                  if (err != null) {
                    return cb(err);
                  }
                  return saveStore($store, function(err){
                    if (err) {
                      return cb(err);
                    }
                    return cb(null);
                  });
                });
              });
            });
          });
        });
      };
      runLivescript = function(message, $text, command, cb){
        var javascript;
        if (command.indexOf('->') > -1) {
          return runFunction(message, $text, command, cb);
        }
        javascript = livescript.compile(command, {
          bare: true
        });
        return runJavascript(message, $text, javascript, cb);
      };
      runCommand = function(message, $text, command, cb){
        trace("run command: " + command);
        return runLivescript(message, $text, command, cb);
      };
      buildCommandHash = function(arg$, cb){
        var current_step, previous_step, name, menuMap, ref$, ref1$, ref2$, ref3$, ref4$, ref5$;
        current_step = arg$.current_step, previous_step = arg$.previous_step, name = arg$.name, menuMap = arg$.menuMap;
        if (((ref$ = menuMap.buttons) != null ? ref$[name] : void 8) === 'request_location') {
          return cb(null, "request_location");
        }
        if (((ref1$ = menuMap.menu) != null ? ref1$[name] : void 8) === 'request_location') {
          return cb(null, "request_location");
        }
        if (((ref2$ = menuMap.buttons) != null ? ref2$[name] : void 8) === 'request_contact') {
          return cb(null, "request_contact");
        }
        if (((ref3$ = menuMap.menu) != null ? ref3$[name] : void 8) === 'request_contact') {
          return cb(null, "request_contact");
        }
        if (((ref4$ = menuMap.buttons) != null ? ref4$[name] : void 8) === 'goto:$previous-step') {
          return cb(null, "goto:" + previous_step);
        }
        if (((ref5$ = menuMap.menu) != null ? ref5$[name] : void 8) === 'goto:$previous-step') {
          return cb(null, "goto:" + previous_step);
        }
        return cb(null, current_step + ":" + name);
      };
      generateCommands = function(arg$, arg1$, cb){
        var chat_id, current_step, previous_step, menuMap, button, buttons, name;
        chat_id = arg$.chat_id, current_step = arg$.current_step, previous_step = arg$.previous_step, menuMap = arg$.menuMap;
        button = arg1$[0], buttons = slice$.call(arg1$, 1);
        if (button == null) {
          return cb(null, []);
        }
        name = button[0];
        return buildCommandHash({
          current_step: current_step,
          previous_step: previous_step,
          name: name,
          menuMap: menuMap
        }, function(err, result){
          if (err != null) {
            return cb(err);
          }
          return handlerTextUser(chat_id, name, function(err, text){
            var item;
            if (err != null) {
              return cb(err);
            }
            item = [text, result];
            return generateCommands({
              chat_id: chat_id,
              current_step: current_step,
              previous_step: previous_step,
              menuMap: menuMap
            }, buttons, function(err, rest){
              var all;
              if (err != null) {
                return cb(err);
              }
              all = [item].concat(rest);
              return cb(null, all);
            });
          });
        });
      };
      onStart = function(message, cb){
        return onCommand({
          text: '',
          from: message.chat
        }, cb);
      };
      getImages = function(menuMap, cb){
        var result;
        result = (function(){
          switch (false) {
          case !(toString$.call(menuMap.images).slice(8, -1) === 'Array' && menuMap.images.length > 0):
            return menuMap.images;
          case toString$.call(menuMap.images).slice(8, -1) !== 'String':
            return [menuMap.images];
          default:
            return [];
          }
        }());
        if (result.length === 0) {
          return mergeImages(menuMap, cb);
        }
        return cb(null, result);
      };
      getButtonsGeneric = function(name){
        return function(arg$, cb){
          var chat_id, current_step, menuMap, previous_step, buttons, ref$;
          chat_id = arg$.chat_id, current_step = arg$.current_step, menuMap = arg$.menuMap, previous_step = arg$.previous_step;
          buttons = objToPairs(
          (ref$ = menuMap[name]) != null
            ? ref$
            : {});
          return generateCommands({
            chat_id: chat_id,
            current_step: current_step,
            previous_step: previous_step,
            menuMap: menuMap
          }, buttons, function(err, commands){
            if (err != null) {
              return cb(err);
            }
            return cb(null, commands);
          });
        };
      };
      getButtons = getButtonsGeneric('buttons');
      getMenu = getButtonsGeneric('menu');
      getPreviousStepKey = function(message){
        return message.from.id + ":previous-step";
      };
      gotoAll = function(arg$, message, cb){
        var current_step, steps;
        current_step = arg$[0], steps = slice$.call(arg$, 1);
        if (current_step == null) {
          return cb(null);
        }
        return goto(current_step, message, function(err){
          if (err != null) {
            return cb(err);
          }
          return gotoAll(steps, message, cb);
        });
      };
      deleteMessageIfExists = function(arg$, cb){
        var chat_id, message_id;
        chat_id = arg$.chat_id, message_id = arg$.message_id;
        if (message_id == null) {
          return cb(null);
        }
        return deleteMessage({
          bot: bot,
          chat_id: chat_id,
          message_id: message_id
        }, cb);
      };
      processCondition = function(command, message, cb){
        var javascript;
        javascript = livescript.compile(command, {
          bare: true
        });
        return getUserByMessage(message, function(err, $user){
          if (err != null) {
            return cb(err);
          }
          return getGlobal(function(err, $global){
            var script, $check, context, result;
            if (err != null) {
              return cb(err);
            }
            script = new vm.Script(javascript);
            $check = {
              result: false
            };
            context = new vm.createContext({
              $user: $user,
              $app: $app,
              $check: $check,
              $global: $global
            });
            result = script.runInContext(context);
            return cb(null, $check.result);
          });
        });
      };
      processConditions = function(arg$, message, cb){
        var condition, conditions;
        condition = arg$[0], conditions = slice$.call(arg$, 1);
        if (condition == null) {
          return cb(null);
        }
        return processCondition(condition[0], message, function(err, data){
          if (err != null) {
            return cb(err);
          }
          if (data === true) {
            return cb(null, condition[1]);
          }
          return processConditions(conditions, message, cb);
        });
      };
      checkRegirectConditions = function(currentStep, message, cb){
        var redirectConditions;
        if ((currentStep != null ? currentStep.redirectCondition : void 8) == null) {
          return cb(null);
        }
        if (toString$.call(currentStep != null ? currentStep.redirectCondition : void 8).slice(8, -1) !== 'Object') {
          return cb("redirect condition should be an object");
        }
        redirectConditions = objToPairs(
        currentStep != null ? currentStep.redirectCondition : void 8);
        return processConditions(redirectConditions, message, cb);
      };
      unvarStep = function(current_step_guess, message, cb){
        if (current_step_guess.indexOf('{{') === -1) {
          return cb(null, current_step_guess);
        }
        return handlerTextUser(message.from.id, current_step_guess, function(err, current_step){
          if (err != null) {
            return cb(err);
          }
          return cb(null, current_step);
        });
      };
      executeOnEnter = function(menuMap, message, cb){
        var onEnter, text;
        onEnter = (function(){
          switch (false) {
          case toString$.call(menuMap.onEnter).slice(8, -1) !== 'Array':
            return menuMap.onEnter;
          case toString$.call(menuMap.onEnter).slice(8, -1) !== 'String':
            return [menuMap.onEnter];
          default:
            return [];
          }
        }());
        text = '#enter';
        return runCommands(message, text, onEnter, function(err){
          if (err != null) {
            return cb(err);
          }
          return cb(null);
        });
      };
      goto = function(current_step_guess, message, cb){
        return unvarStep(current_step_guess, message, function(err, current_step){
          if (err != null) {
            return cb(err);
          }
          return getPreviousStep(message, function(err, previous_step){
            var previousStepKey, nameMenu;
            if (err != null) {
              return cb(err);
            }
            previousStepKey = getPreviousStepKey(message);
            nameMenu = current_step + ":bot-step";
            return put(previousStepKey, current_step, function(err){
              if (err != null) {
                return cb(err);
              }
              return get(current_step + ":bot-step", function(err, currentMap){
                return checkRegirectConditions(currentMap, message, function(err, regirect_step){
                  if (err != null) {
                    return cb(err);
                  }
                  if (regirect_step != null) {
                    return goto(regirect_step, message, cb);
                  }
                  if (err != null) {
                    return cb(err);
                  }
                  return get("main:bot-step", function(err, mainMap){
                    var menuMap;
                    if (err != null) {
                      return cb(err);
                    }
                    menuMap = currentMap != null ? currentMap : mainMap;
                    return executeOnEnter(menuMap, message, function(err){
                      var chat_id;
                      if (err != null) {
                        return cb(err);
                      }
                      chat_id = message.from.id;
                      return getButtons({
                        chat_id: chat_id,
                        current_step: current_step,
                        menuMap: menuMap,
                        previous_step: previous_step
                      }, function(err, buttons){
                        if (err != null) {
                          return cb(err);
                        }
                        return getMenu({
                          chat_id: chat_id,
                          current_step: current_step,
                          menuMap: menuMap,
                          previous_step: previous_step
                        }, function(err, menu){
                          if (err != null) {
                            return cb(err);
                          }
                          return getImages(menuMap, function(err, images){
                            var photo, chat;
                            if (err != null) {
                              return cb(err);
                            }
                            photo = (function(){
                              switch (false) {
                              case toString$.call(images).slice(8, -1) !== 'Undefined':
                                return null;
                              case toString$.call(images).slice(8, -1) !== 'Array':
                                return images[0];
                              case toString$.call(images).slice(8, -1) !== 'String':
                                return images;
                              default:
                                return null;
                              }
                            }());
                            chat = message.from;
                            return handlerTextUser(chat_id, menuMap.text, function(err, text){
                              var messageBody;
                              if (err != null) {
                                return cb(err);
                              }
                              messageBody = {
                                bot: bot,
                                chat: chat,
                                photo: photo,
                                buttons: buttons,
                                text: text,
                                menu: menu
                              };
                              return sendMedia(messageBody, function(err, nextMessage){
                                if (err != null) {
                                  return cb(err, false);
                                }
                                return put(nextMessage.message_id + ":message", (import$({
                                  current_step: current_step
                                }, messageBody)), function(err){
                                  if (err != null) {
                                    return cb(err);
                                  }
                                  return get("${chat_id}." + current_step, function(err, message_id){
                                    return deleteMessageIfExists({
                                      chat_id: chat_id,
                                      message_id: message_id
                                    }, function(){
                                      return put("${chat_id}." + current_step, nextMessage.message_id, function(err){
                                        if (err != null) {
                                          return cb(err);
                                        }
                                        return cb(null, true);
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      };
      getPreviousStep = function(message, cb){
        var previousStepKey;
        previousStepKey = getPreviousStepKey(message);
        return get(previousStepKey, function(err, previous_step_guess){
          var ref$;
          return get((message != null ? (ref$ = message.message) != null ? ref$.message_id : void 8 : void 8) + ":message", function(err, previousMessageBody){
            var text, ref$, previous_step;
            text = (ref$ = message.data) != null ? ref$ : "";
            previous_step = (function(){
              switch (false) {
              case !(text.indexOf(':') > -1 && text.indexOf('goto:') === -1):
                return text.split(':')[0];
              case previousMessageBody == null:
                return previousMessageBody.current_step;
              case previous_step_guess == null:
                return previous_step_guess;
              default:
                return 'main';
              }
            }());
            return cb(null, previous_step);
          });
        });
      };
      onCommand = function(message, cb){
        var ref$;
        if ((message != null ? (ref$ = message.message) != null ? ref$.message_id : void 8 : void 8) == null) {
          return cb(null, false);
        }
        return getPreviousStep(message, function(err, previous_step){
          var addr, text;
          if (err != null) {
            return cb(err, false);
          }
          addr = serverAddress + ":" + serverPort;
          text = (function(){
            var ref$;
            switch (false) {
            case message.data == null:
              return message.data;
            case message.text == null:
              return message.text;
            case message.contact == null:
              return message.contact.phone_number + " " + message.contact.first_name + " " + message.contact.last_name;
            case message.location == null:
              return "<a href='https://www.google.com/maps/@" + message.location.latitude + "," + message.location.longitude + ",15z'>Место на карте</a>";
            case message.document == null:
              return "<a href='" + addr + "/get-file/" + message.document.file_id + "'>Документ</a>";
            case ((ref$ = message.photo) != null ? ref$[0] : void 8) == null:
              return "<a href='" + addr + "/get-file/" + message.photo[0].file_id + "'>Фотография</a>";
            case message.video == null:
              return "<a href='" + addr + "/get-file/" + message.video.file_id + "'>Видео</a>";
            case message.voice == null:
              return "<a href='" + addr + "/get-file/" + message.voice.file_id + "'>Запись голоса</a>";
            default:
              return message.text;
            }
          }());
          return get("main:bot-step", function(err, mainStep){
            if (err != null) {
              return cb(err);
            }
            return get(previous_step + ":bot-step", function(err, previousStepGuess){
              var previousStep, clickedButton, commands;
              previousStep = previousStepGuess != null ? previousStepGuess : mainStep;
              clickedButton = (function(){
                var ref$, ref1$, ref2$, ref3$;
                switch (false) {
                case text != null:
                  return 'goto:main';
                case !((text != null ? text : "").indexOf('goto:') > -1):
                  return text;
                case !((text != null ? text : "").indexOf(':') > -1 && ((ref$ = previousStep.buttons) != null ? ref$[text.split(':')[1]] : void 8) != null):
                  return previousStep.buttons[text.split(':')[1]];
                case !((text != null ? text : "").indexOf(':') > -1 && ((ref1$ = previousStep.menu) != null ? ref1$[text.split(':')[1]] : void 8) != null):
                  return previousStep.menu[text.split(':')[1]];
                case ((ref2$ = previousStep.buttons) != null ? ref2$[text] : void 8) == null:
                  return previousStep.buttons[text];
                case ((ref3$ = previousStep.menu) != null ? ref3$[text] : void 8) == null:
                  return previousStep.menu[text];
                case previousStep.onText == null:
                  return previousStep.onText;
                default:
                  return null;
                }
              }());
              if (message.text != null && message.data == null && clickedButton === null && previous_step !== 'main') {
                return onCommand((import$({
                  data: "main:" + message.text
                }, message)), cb);
              }
              clickedButton = clickedButton != null ? clickedButton : 'goto:main';
              commands = (function(){
                switch (false) {
                case toString$.call(clickedButton.store).slice(8, -1) !== 'String':
                  return [clickedButton.store];
                case toString$.call(clickedButton.store).slice(8, -1) !== 'Array':
                  return clickedButton.store;
                default:
                  return [];
                }
              }());
              return runCommands(message, text, commands, function(err){
                var current_step, currentSteps;
                if (err != null) {
                  return cb(err);
                }
                current_step = (function(){
                  var ref$;
                  switch (false) {
                  case toString$.call(clickedButton).slice(8, -1) !== 'String':
                    return (ref$ = clickedButton.split(':')[1]) != null ? ref$ : 'main';
                  case toString$.call(clickedButton).slice(8, -1) !== 'Object':
                    return (ref$ = clickedButton.goto) != null ? ref$ : 'main';
                  default:
                    return 'main';
                  }
                }());
                currentSteps = current_step.split(',');
                return gotoAll(currentSteps, message, cb);
              });
            });
          });
        });
      };
      handlers = {
        onCommand: onCommand,
        onStart: onStart
      };
      handlerKeys = Object.keys(handlers);
      storeUsername = function(message, cb){
        if (message.chat == null) {
          return cb(null);
        }
        return put(message.chat.username + ":username", message.chat.id, function(err){
          if (err != null) {
            return cb(err);
          }
          return cb(null);
        });
      };
      processHandlers = function(arg$, message, cb){
        var handler, rest, chat_id;
        handler = arg$[0], rest = slice$.call(arg$, 1);
        if (handler == null) {
          return cb(null, false);
        }
        chat_id = message.from.id;
        return storeUsername(message, function(err){
          var message_id;
          if (err != null) {
            return cb(err);
          }
          message_id = message.message.message_id;
          return handlers[handler](message, function(err, result){
            if (err != null) {
              return cb(err, false);
            }
            if (result) {
              return cb(null, true);
            }
            return processHandlers(rest, message, function(err, result){
              return cb(err, result);
            });
          });
        });
      };
      processMesssage = function(query, cb){
        var message;
        message = query.message;
        if (message == null) {
          return cb(null);
        }
        return processHandlers(handlerKeys, query, function(result){
          return cb(null, result);
        });
      };
      updatePreviousMesssage = function(arg$, cb){
        var type, message, option;
        type = arg$.type, message = arg$.message;
        if (type === 'message') {
          return cb(null);
        }
        option = (function(){
          var ref$;
          switch (false) {
          case !(((ref$ = message.data) != null ? ref$.indexOf(':') : void 8) > -1):
            return message.data.split(":")[1];
          default:
            return message.data;
          }
        }());
        return get(message.message.message_id + ":message", function(err, messageBody){
          var chat_id, message_id, text;
          if (err != null) {
            return cb(err);
          }
          chat_id = message.message.chat.id;
          message_id = message.message.message_id;
          text = messageBody.text + "\n\nВабрана опция: `" + option + "`";
          return editMessage(bot, chat_id, message_id, text, {}, {}, function(err){
            return cb(null);
          });
        });
      };
      bot.on('update', function(result){
        var message, ref$, type;
        message = (ref$ = result.message) != null
          ? ref$
          : result.callback_query;
        type = (function(){
          switch (false) {
          case result.callback_query == null:
            return 'callback_query';
          default:
            return 'message';
          }
        }());
        return updatePreviousMesssage({
          type: type,
          message: message
        }, function(){
          return processMesssage((import$({
            message: message
          }, message)), trace);
        });
      });
      getFromId = function(arg$, cb){
        var message, token;
        message = arg$.message, token = arg$.token;
        return get(token + ":access-keys", function(err, record){
          var chat_id, steps;
          if (err != null) {
            return cb(err);
          }
          if (toString$.call(record).slice(8, -1) !== 'Object') {
            return cb("not found registered record for token");
          }
          chat_id = record.chat_id, steps = record.steps;
          if (steps.indexOf(message) > -1) {
            return cb("step is not permitted");
          }
          return get(chat_id + ":chat_id", function(err, user){
            if (err != null) {
              return cb(err);
            }
            return del(token + ":access-keys", function(err){
              if (err != null) {
                return cb(err);
              }
              return cb(null, user);
            });
          });
        });
      };
      processHttpMessage = function(body, cb){
        var ref$, message, token;
        ref$ = req.body, message = ref$.message, token = ref$.token;
        if (message == null) {
          return cb("message is required");
        }
        if (token == null) {
          return cb("token is required");
        }
        return getFromId({
          message: message,
          token: token
        }, function(err, id){
          var from;
          if (err != null) {
            return cb(err);
          }
          from = {
            id: id
          };
          return processMesssage({
            message: message,
            from: from
          }, function(err, result){
            if (err != null) {
              return cb(err);
            }
            return cb(null, result);
          });
        });
      };
      restify = function(res){
        return function(err, result){
          var ref$;
          if (err != null) {
            return res.status(400).send(((ref$ = err.message) != null ? ref$ : err) + "");
          }
          return res.send(result);
        };
      };
      proxyFile = function(req, res){
        var file_id;
        file_id = req.params.file_id;
        return bot.getFile({
          file_id: file_id
        }, function(err, data){
          if (err != null) {
            return res.status(400).send("cannot get file: " + err);
          }
          return request.get("https://api.telegram.org/file/bot" + telegramToken + "/" + data.file_path).pipe(res);
        });
      };
      return express().use(bodyParser.urlencoded({
        extended: true
      })).use(bodyParser.json()).use(cors()).get('/get-file/:file_id', proxyFile).get('/google8b809baeb12ee9e4.html', function(req, res){
        return res.sendFile(__dirname + "/google8b809baeb12ee9e4.html");
      }).post('/api/message/:message/:token', function(req, res){
        return processHttpMessage(req.params, restify(res));
      }).get('/api/message/:message/:token', function(req, res){
        return processHttpMessage(req.params, restify(res));
      }).listen(serverPort, function(){
        return cb(null, "Tanos is started");
      });
    });
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
